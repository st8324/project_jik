클래스 : 정보를 쉽게 관리하기 위해 만드는 것
 - 멤버변수 : 정보
 - 멤버메소드 : 기능
 - 생성자 : 정보 초기화

클래스 만드는 과정
1. 멤버변수
2. 생성자
3. 멤버메소드

한국인 클래스
멤버변수 : 이름, 성별, 주민번호, 나이, 주소 등

상품 클래스
멤버변수 : 카테고리, 상품명, 제고량, 판매량, 가격 등

접근제한자
- public 		: 본인 클래스 + 같은 패키지 + 자식클래스 + 다른 패키지
- protected 	: 본인 클래스 + 같은 패키지 + 자식클래스 
- (default)	: 본인 클래스 + 같은 패키지
- private		: 본인 클래스

생성자
- 멤버변수 초기화 : 일반 변수인 경우 초기값을 설정하고, 참조 변수인 경우 객체를 생성
- 생성자의 이름은 클래스명과 같다
- 리턴타입 없다
  - 잘된 예 
public 클래스명(){}
  - 잘못된 예
public void 클래스명(){} //생성자가 아니라 메소드
- 생성자는 객체를 생성할 때 원하는 생성자를 호출한다
- 생성자는 객체를 생성할때를 제외하고 임의로 호출할 수 없다
Point pt = new Point();
pt.Point();//생성자를 이렇게 호출할 수 없다
- 생성자가 없는 경우 기본 생성자가 만들어진다
- 생성자는 여러개 있을 수 있다. => 생성자 오버로딩
- 생성자 오버로딩은 매개변수의 종류가 다른 경우 만들 수 있다
   - 매개변수의 갯수가 다른 경우 가능
   - 매개변수의 타입이 다른 경우 가능
- 복사 생성자
public 클래스명(클래스명 객체명){}

this 객체(p.272)
- 클래스 안에서만 사용(멤버 메소드, 생성자에서 사용 가능)
- 객체인데 나를 의미
- 매개변수의 이름과 멤버 변수의 이름이 같은 경우 필수로 사용
- this() : 해당 클래스의 생성자
  this()생성자는 생성자안에서 첫줄에 와야한다.

오버로딩
- 같은 이름의 메소드/생성자가 여러개인 경우
- 매개변수가 다른 경우에 가능
  - 매개변수의 갯수가 다른 경우
  - 매개변수의 갯수가 같지만 타입이 다른 경우
- 생성자 오버로딩
- 메소드 오버로딩

메소드 매개변수의 갯수를 모를 때
1. 배열
2. ...

일반변수		vs 	참조변수
- 기본 타입 변수		- 기본 타입이 아닌 변수
- 값			- 주소
- int, char, double,..		- 배열, String , 클래스, 열거형 등

멤버변수		vs	지역변수
- 해당 클래스 안 전체	- 변수가 선언된 위치에서 포함된 범위


객체 멤버 변수	vs	클래스 멤버 변수(정적 멤버 변수, static이 붙은)
- 멤버변수를 호출할 때	- 멤버변수를 호출할 때 클래스이름으로 호출
  객체이름으로 호출		
- 객체명.멤버변수명		- 클래스명.멤버변수명(객체명.멤버변수명도 가능)
- static 없음		- static 있음
- 객체당 하나씩 존재		- 클래스당 하나(모든 객체가 공유)


기아 자동차 클래스
- 멤버변수 : 제조사, 차명, 생산량(기아자동차 생산량)
  - 객체 멤버변수 : 차명,
  - 클래스 멤버변수 : 제조사, 생산량

객체멤버메소드	vs	클래스멤버메소드
- static 없음		- static 있음
- 객체.메소드명()으로 호출	- 클래스.메소드명으로 호출(Math.random() )
- 각 객체마다 메소드를 가지고 	- 하나의 클래스가 메소드를 가지고 있음
  있음	

클래스 멤버 변수/메소드와 객체 멤버 변수/메소드의 사용시 유의 사항
- 클래스 멤버변수/메소드는 객체 메소드에서 사용 가능
- 클래스 멤버변수는 클래스 메소드에서 사용 가능
- 객체 멤버변수/메소드는 클래스 메소드에서 사용 불가능
- 객체 멤버변수는 객체메소드에서 사용 가능

클래스 변수/메소드는 클래스가 메모리에 올라갈 때 선언
객체 변수/메소드는 객체가 생성될 때 선언
  클래스 메소드가 호출 된 시점에 객체가 만들어져 있는지 안만들어져 있는지 알수 없고,
  어떤 객체의 정보를 출력해야할지 모르기 때문에 클래스 메소드에서는 객체 변수
  /메소드를 호출할 수 없다

final : 변경이 불가능
- 변수	: 상수
  - 생성자에 final 변수를 초기화 할 수 있다. 단, 한번 초기화 한 후에는 변경할 수 없다.
- 메소드	: 메소드 오버라이딩 불가능
- 클래스	: 상속 불가능(예 : String)

다음 메뉴를 가지는 게시글 콘솔 프로그램을 만드세요.
1. 게시글 등록
2. 게시글 수정
3. 게시글 삭제
4. 게시글 목록 확인
5. 게시글 상세 확인
6. 프로그램 종료





















