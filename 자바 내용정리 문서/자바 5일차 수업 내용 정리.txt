- while문 문법
while(조건식){
	실행문;
}

초기화;
while(조건식){
	실행문;
	증감식;
}
- while문에서 조건식은 생략 불가능
- 모든 반복문은 for으로 표현 가능하다
- 모든 반복문은 while문으로 표현 가능하다
- for문 while문 둘 중에 하나만 잘 써도 된다
- 강사는 주로 반복하는 숫자가 일정하게 증가하거나 반복횟수가 정해져 있는 경우 
  for문을 사용
- 강사는 주로 반복횟수가 정해져 있지 않은 경우 while문을 사용

- do while문 문법

do{
	실행문;
}while(조건식);

 - do while문은 무조건 1번은 됨
 - do while문은 최소 1번은 실행되어야 할 때 사용
 - 영문자 입력 예제

for( ; ; ){
	for( ; ; ){
		if(){
			//아래 break를 만나면 A로 이동
			break;
		}
	}
	//A
}
//B

Label1 : for( ; ; ){
	for( ; ; ){
		if(){
			//아래 break를 만나면 B로 이동
			break Label1;
		}
	}
	//A
}
//B

반복문
- 반복문 종류(for, while, do while)
- 언제 사용? 규칙적인 작업을 반복할 때
- 반복횟수, 규칙성, 반복문 종료 후 작업으로 나눠서 연습

- 참조타입
- 정수형, 실수형, 논리형은 기본타입
- 문자열은 참조타입
- 기본 타입은 값을 저장
- 참조 타입은 주소를 저장
- 기본타입이 아닌 모든 타입은 참조타입이다\
- 참조변수에서 ==와 !=는 주소를 비교하기 때문에 실제 값이 같더라도 주소가 
  다르면 다르다고 판단한다
- 참조변수는 일반적으로 초기값을 null로 지정
- null : 객체를 참조하지 않는다는 의미

- 리터럴 : 1, 'a', 1.23, 실제 값(코드에서 사용하는 값)
- 참조변수 = 주소

- 배열
 - 배열을 생성할 수 있다.
 - 반복문을 이용하여 배열을 관리할 수 있다.

 - 배열 : (같은 의미) + 같은 타입의 변수들을 모아 놓은 것
//아래는 성적이라는 의미로 묶을 수 있기 때문에 배열로 만들어서 사용
int stdScore1, stdScore2, .. stdScore30;
//아래는 타입은 같지만 의미를 묶을 수 없기 때문에 배열로 안만드는것이 낫다
int appleCount, stdScore, age;

 - 배열 선언 방법
타입 배열명[];
타입 [] 배열명;
타입 배열명[] = new 타입[크기];	//추천
타입 배열명[] = {값1, 값2, 값3, ...};
타입 배열명[] = new 타입[]{값1, 값2, 값3, ..};

int array1[] = null;
int []array2 = null;

- 객체 : new 연산자를 통해 만들어진 저장 공간
- 변수 : 일반 타입으로 만들어진 저장 공간
- 배열의 시작 번지는 0번지부터 시작, 마지막번지는 크기-1
- 배열의 값 가져오기
  배열명[번지]
  - 배열의 첫번째 값을 가져오고 싶다
    => 배열의 0번지의 값을 가져오고 싶다
    => 배열명[0]
- 배열의 길이는 배열명.length로 알수 있다

숫자 야구 게임
 - 1 ~ 9 사이의 중복되지 않은 3개의 정수를 랜덤으로 생성
 - B : 숫자는 있지만 위치는 다른 경우
 - S : 숫자도 있고, 위치가 같은 경우
 - O : 일치하는 숫자가 하나도 없는 경우
예시 : 3 9 5
입력 하세요 : 1 2 3
1B
입력 하세요 : 4 5 6
1B
입력하세요 : 3 4 5
2S
입력하세요 : 3 5 9
1S2B
입력하세요 : 6 7 8
O
입력하세요 : 3 9 5
3S
정답입니다.



















