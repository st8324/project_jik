예외 : 코드로 해결 가능한 문제들
 - 예외처리 : 예외가 발생할수 있는 코드를 예외가 발생했을 때 처리할수
                 있도록 작성하는 코드
 - 일반예외 : 실행되기전 컴파일에서 예외가 발생. 실행 안됨
 - 실행예외 : 실행했을 때 발생.
   - ClassCastException
     - 클래스 타입 변환시 발생 가능
     - 부모 클래스 객체를 자식 클래스로 변환할 때 발생 가능
   - ArrayIndexOutOfBoundsException
     - 배열을 이용할 때 발생 가능
     - 잘못된 번지를 이용하여 접근하는 경우 발생
   - NullPointerException
     - 참조변수를 이용할 때 발생 가능
     - 객체를 생성하지 않고 멤버변수나 멤버 메소드를 호출 할 때 발생
   - NumberFormatException
     - 문자열을 숫자로 변환할 때 발생 가능
     - 숫자로 바꾸려는 문자열에 알파벳이나 특수문자등이 포함된 경우
   - ArithmeticException
     - 나누기할때 발생 가능( /, %)
     - 0으로 나누면 발생

예외처리 : 
1. 직접처리 : try catch
try{
	예외가 발생할 수 있는 코드;
}catch(예외클래스1 e){
	예외1이 발생했을 때 실행할 코드1;
}catch(예외클래스2 e){
	예외2가 발생했을 때 실행할 코드2;
}catch(Exception e){
	예외1, 예외2를 제외한 모든 예외가 발생했을 때 실행할 코드3;
}finally{
	항상실행;
}
 - finally : 메소드가 종료되더라도 무조건 실행

2. 떠넘기기 : throws
 - 메소드에서 예외가 발생한 경우 직접 예외처리를 하지 않고
   호출한 메소드에게 예외처리를 떠넘길 수 있다.
 - 메소드에 throws를 이용하여 해당 메소드에서 발생할 수 있는 
   예외 종류들을 알려줘야 한다.
 - 단, 실행 예외인 경우 throws에 알려주지 않아도 됨

throw :  자바에서 정해놓은 예외가 아닌 개발자가 발생시키는 예외를 만들
            때 사용
- throw 예외 객체;

- 실행 예외가 아닌 일반 예외는 무조건 예외처리를 해야된다.
- 실행 예외는 예외처리를 안해도 프로그램은 실행 됨
- 실행 예외는 RuntimeException을 상속받은 예외 클래스들이다.
  RuntimeException 포함

Object 클래스
 - 모든 클래스의 조상
 - Object클래스에서 제공하는 메소드를 오버라이딩해서 잘 사용해야 한다
 - equals()
   - Object클래스의 equals()는 두 객체의 주소가 같은지를 확인
   - 클래스에서 equals()를 오버라이딩해서 원하는 값을 확인하는
     메소드로 수정해야 한다
   - Object 클래스의 자식 클래스는 equals()를 오버라이딩해서
     객체의 멤버변수의 값이 같으면 같은 객체로 판별할수 있다
 
 - hashCode()
  - 해쉬코드값을 이용하여 그룹으로 묶어서 분류한다

 - toString()
  - 클래스의 멤버변수값을 문자열로 바꿀 때 사용하는 메소드
  - System.out.println(객체명)을 하면 해당하는 객체의 toString()이
    자동으로 호출된다.

- 예외
 - try catch 또는 throws를 이용하지 않고 조건문과 리턴값을 이용하여
   예외 처리를 할 수 있다.
   하지만 메소드에 리턴값이 이미 있는 경우는 조건문과 리턴값을 이용하여
   예외처리를 할 수 없다.
   조건문과 리턴값을 이용한 예외처리는한계가 있기 때문에 잘 사용되지
   않은다.

- Object클래스
 - 모든 클래스의 조상 클래스
 - equals()
 - toString()











